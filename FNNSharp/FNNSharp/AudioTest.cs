using NAudio.Wave;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FNNSharp
{
    internal class AProvided : WaveProvider32
    {
        double[] A = new double[] { -0.2330, 0.2124, 0.5014, 0.5222, -0.3422, -0.5840, -0.7168, -0.6342, -0.8614, -0.8318, -0.7228, -0.6312, -0.4986, -0.7080, -0.6666, -0.5428, -0.4130, -0.3776, -0.0472, 0.1356, 0.6136, 0.8024, 1.0000, 0.9794, 0.9352, 0.8732, 0.9440, 0.9588, 0.6962, 0.4838, 0.3982, 0.2064, -0.3270, 0.0134, 0.3620, 0.3218, -0.4558, -0.8096, -0.7748, -0.7238, -0.8392, -0.9544, -0.9088, -0.6462, -0.6434, -0.6140, -0.7024, -0.6702, -0.6194, -0.4344, -0.4076, -0.2574, 0.1636, 0.3994, 0.7024, 0.9008, 0.8686, 0.7614, 0.9088, 1.0000, 0.9920, 0.8632, 0.6756, 0.4102, -0.4166, -0.1528, 0.2346, 0.1832, -0.4282, -0.7760, -0.8460, -0.8134, -0.8554, -0.8204, -0.7526, -0.7036, -0.6382, -0.6126, -0.6196, -0.5450, -0.5122, -0.6196, -0.3908, -0.3372, -0.1178, 0.3676, 0.6780, 0.8716, 0.7852, 0.7526, 0.8134, 1.0000, 0.9604, 0.8226, 0.5730, 0.5192, -0.4292, -0.1532, 0.1996, 0.1484, -0.4060, -0.6984, -0.7958, -0.7216, -0.9328, -0.8492, -0.7958, -0.7424, -0.7308, -0.6520, -0.6194, -0.6148, -0.5498, -0.5452, -0.4292, -0.3526, -0.0650, 0.3202, 0.5962, 0.9096, 0.8004, 0.8028, 0.8886, 0.9792, 1.0000, 0.7726, 0.6102, 0.4942, -0.3170, -0.0208, 0.2754, 0.2362, -0.4786, -0.7528, -0.7258, -0.6646, -0.7724, -0.6940, -0.6744, -0.6402, -0.6598, -0.6696, -0.5986, -0.6818, -0.5618, -0.5276, -0.4688, -0.3440, 0.0550, 0.2950, 0.5152, 1.0000, 0.9854, 0.7308, 0.8850, 0.8800, 0.9388, 0.7478, 0.7258, 0.4444, -0.2506, 0.1634, 0.3542, 0.3760, -0.4496, -0.6076, -0.6702, -0.6540, -0.8446, -0.7194, -0.6840, -0.7574, -0.7684, -0.8366, -0.6594, -0.6104, -0.6920, -0.6702, -0.6404, -0.4360, -0.2370, 0.1716, 0.5668, 0.7792, 0.9238, 0.8420, 0.7548, 1.0000, 0.9674, 0.8474, 0.6730, 0.5886, -0.1506, 0.5914, 0.4802, 0.6954, -0.0358, -0.5304, -0.5484, -0.4552, -0.8028, -0.7348, -0.6666, -0.6882, -0.7420, -0.9750, -0.6846, -0.7348, -0.6560, -0.6130, -0.7562, -0.3800, 0.0250, 0.3118, 0.7706, 0.8888, 0.9964, 0.9176, 0.9140, 1.0000, 0.9462, 0.6810, 0.4660, 0.4266, -0.1282, 0.2308, 0.4872, 0.3846, -0.2308, -0.4358, -0.3846, -0.3846, -0.6924, -0.4872, -0.5384, -0.4872, -0.1282, -0.1794, -0.3846, 0.0770, 0.0256, -0.0770, 0.1794, 0.6924, 1.0000, 0.6924, 0.6410, 0.9488, 0.6924, 0.3846, 0.2308, 0.0256, 0.1794, -0.3334, 0.0770, 0.0256, -0.3000, 0.0500, 0.3000, 0.3500, -0.3000, -0.3500, -0.5500, -0.5000, -0.5500, -0.7500, -0.7000, -0.6500, -0.7000, -0.6500, -0.6500, -0.6000, -0.7000, -0.3500, 0.0500, 0.1500, 0.8000, 0.7500, 0.9000, 0.8000, 0.8000, 1.0000, 0.7500, 0.5500, 0.5000, 0.3000, 0.3500, 0.1000, -0.1764, 0.0392, 0.3726, 0.3334, -0.1960, -0.5490, -0.5882, -0.4902, -0.3726, -0.3726, -0.3922, -0.5294, -0.2156, -0.2550, -0.4510, -0.2156, -0.1960, -0.4118, -0.0196, 0.0000, 0.0980, 0.4902, 0.7844, 0.9216, 0.8628, 0.8628, 0.9216, 1.0000, 0.9608, 0.9412, 0.6666, 0.5882, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -0.8008, -0.8174, -0.2738, 0.8796, 0.8216, 0.5602, 0.5478, 0.4688, 0.4356, 0.3568, 0.3652, 0.3568, 0.1868, -0.0580, -0.5104, -0.8424, -0.9046, -0.9088, -0.9378, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -0.8610, -0.8690, -0.1062, 0.5988, 0.3902, 0.4816, 0.6484, 0.8034, 0.8988, 0.7180, 0.3128, 0.1300, -0.0408, -0.3128, -0.6782, -0.8034, -0.8352, -0.8074, -0.9066, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -0.9334, -0.8734, -0.6068, -0.4084, -0.4634, -0.2662, -0.2308, -0.1632, -0.1308, -0.2140, -0.2878, -0.4570, -0.6294, -0.8154, -0.8534, -0.4400, -0.3068, -0.4468, -0.9234, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -0.9428, 1.0000, 1.0000, 1.0000, -0.9142, -0.9714, -0.9714, -0.9142, -1.0000, -0.9142, -0.9714, -0.9714, -0.8572, 0.4000, -0.0572, -0.6000, -0.7428, -0.4858, -0.4286, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -1.0000, -0.3504, -0.3592, -0.3746, -0.3802, -0.3676, -0.4006, -0.3938, -0.4374, -0.4316, -0.3986, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, -0.5200, 0.5412, 0.1202, 0.1698, 0.6306, 0.7458, 0.6802, 0.5666, 0.2654, 0.3878, 0.4286, 0.2654, 0.3470, 0.4286, 0.8368, 0.8776, 0.9184, 1.0000, 0.9184, 0.9184, 0.9184, 0.8368, 0.8368, 0.9184, 0.9184, 0.7552, 0.7142, 0.7142, 0.8776, 0.7552, 0.8368, 0.6734, 0.7960, 0.6326, 0.7552, 0.7552, 0.6734, 0.7142, 0.4286, 0.0612, 0.0476, 0.0952, -0.1190, -0.1666, -0.1428, -0.0952, 0.2620, 0.4048, 0.5476, 1.0000, 0.7858, 0.5000, 0.6428, 0.5000, 0.3810, 0.7142, 1.0000, 0.5952, 0.1666, 0.1904, 0.5952, 0.4524, 0.4762, 0.3096, 0.4286, 0.0714, -0.0476, 0.1904, 0.1904, 0.4048, 0.0714, -0.0238, 0.2858, 0.5510, 0.4082, -0.0816, -0.4082, -0.0612, -0.0408, 0.0408, 0.4694, 0.8164, 0.9592, 1.0000, 0.9796, 0.5918, 0.4082, 0.3674, 0.8572, 0.7552, 0.1224, 0.2040, 0.3878, 0.2448, 0.2448, 0.1836, 0.2858, 0.2040, 0.1632, 0.1020, 0.1632, 0.1020, -0.1224, -0.1224, 0.9424, -1.0000, -1.0000, 1.0000, -0.8000, -1.0000, -0.6000, -0.8334, -1.0000, -0.4286, -0.2540, -0.3650, -0.0952, -0.0794, 0.0318, -0.2064, 0.0634, 0.1112, 0.1746, 0.2380, 0.1904, 0.5080, 0.5396, 0.0318, -0.0158, 0.7142, 1.0000, 0.4126, -0.0794, -0.0476, 0.0000, 0.0952, -0.1112, -0.0476, -0.1746, 0.0318, -0.0476, 0.1112, 0.2540, 0.1588, -0.4762};
        public override int Read(float[] buffer, int offset, int count)
        {
            int N = 0;
            for(int n = 0; n < (N = A.Count() < count ? A.Count() : count ); n++)
            {
                buffer[n+offset] = (byte)A[n];
            }
            
            return N;
            
        }
    }


    internal class AudioTest
    {
        private static void Main(string[] args)
        {
            var a = new AProvided();
            a.SetWaveFormat(16000,1);
            var waveOut = new WaveOut();
            waveOut.Init(a);
            waveOut.Play();
            Console.ReadKey();
            waveOut.Stop();
            waveOut.Dispose();
        }
    }
}
